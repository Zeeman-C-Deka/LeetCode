class Solution {
    Map<Integer, List<Integer>> gg;
    Map<Integer, List<Integer>> ig;

    int[] gd;
    int[] id;

    private void buildGraphOfGroups(int[] group, List<List<Integer>> beforeItems, int n) {
        for (int i = 0; i < group.length; i++) {
            int toGroup = group[i];
            List <Integer> fromItems = beforeItems.get(i);
            for (int fromItem : fromItems) {
                int fromGroup = group[fromItem];
                if(fromGroup != toGroup) {
                    gg.computeIfAbsent(fromGroup, x->new ArrayList()).add(toGroup); 
                    gd[toGroup]++;
                }        
            }
        }
    }

    private void buildGraphOfItems(List<List<Integer>> beforeItems, int n) {
        for (int i = 0; i < n; i++) {
            List<Integer> items = beforeItems.get(i);
            for (Integer item : items) {
                ig.computeIfAbsent(item, x->new ArrayList()).add(i);
                id[i]++;
            }
        }
    }

    private List<Integer> topologicalSortUtil(Map <Integer, List<Integer>> graph, int[] indegree, int n) {
        List <Integer> list = new ArrayList<Integer>();
        Queue <Integer> queue = new LinkedList();
        for (int key : graph.keySet()) {
            if(indegree[key] == 0) {
                queue.add(key);
            }
        }
        
        while(!queue.isEmpty()) {
            int node = queue.poll();
            n--;
            list.add(node);
            for (int neighbor : graph.get(node)) {
                indegree[neighbor] --;        
                if(indegree[neighbor] == 0) {
                    queue.offer(neighbor);          
                }
            }
        }    
        return n == 0 ? list : new ArrayList();
    }

    public int[] sortItems(int n, int m, int[] g, List<List<Integer>> beforeItems) {
        gg = new HashMap<>();
        ig = new HashMap<>();

        for(int i = 0; i < n; i++){
            if(g[i] == -1) g[i] = m++;
        }
        for(int i = 0; i < m; i++){
            gg.put(i, new ArrayList()); 
        }
        for(int i = 0; i < n; i++){
            ig.put(i, new ArrayList()); 
        }

        gd = new int[m];
        id = new int[n];

        buildGraphOfGroups(g, beforeItems, n);
        buildGraphOfItems(beforeItems, n);

        List<Integer> groupsList = topologicalSortUtil(gg, gd, m);
        List<Integer> itemsList = topologicalSortUtil(ig, id, n);

        if(groupsList.size() == 0 || itemsList.size() == 0) return new int[0];    
    
        Map <Integer, List<Integer>> groupsToItems = new HashMap();
            
        for (Integer item : itemsList) {
            groupsToItems.computeIfAbsent(g[item], x->new ArrayList()).add(item);
        }
        
        int[] ans = new int[n];
        int idx = 0;
        for (Integer grp : groupsList) {
            List <Integer> items = groupsToItems.getOrDefault(grp, new ArrayList());
            for (Integer item : items) {
                ans[idx++] = item;  
            }      
        }
        
        return ans;
    }
}
