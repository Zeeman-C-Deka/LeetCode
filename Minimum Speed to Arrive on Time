class Solution {
    public boolean isPossible(int[] dist, int speed, double hour) {
        double ans = 0;
        for (int i = 0; i < dist.length; i++) {
            double d = dist[i] * 1.0 / speed;
            if (i != dist.length - 1)
                ans = ans + Math.ceil(d);
            else
                ans += d;
            if (ans > hour)
                return false;
        }
        return ans <= hour;
    }

    public int minSpeedOnTime(int[] dist, double hour) {
        int i = 1;
        int j = (int) 1e7;
        int minSpeed = -1;
        while (i <= j) {
            int mid = i + (j - i) / 2;
            if (isPossible(dist, mid, hour)) {
                minSpeed = mid;
                j = mid - 1;
            } else
                i = mid + 1;
        }
        return minSpeed;
    }

    // public int minSpeedOnTime(int[] dist, double hour) {
    //     int n = dist.length;
    //     // int tD = 0;
    //     // for(int d : dist)
    //     //     tD += d;
        
    //     int ti = 1;
    //     //(int)Math.ceil(tD/hour);
    //     // System.out.print(tS + " ");
    //     int tj = (int) 1e7;
    //     int tS = -1;
    //     while(ti <= tj){
    //         int mid = ti + (tj-1) / 2;
    //         double tT = 0.0;
    //         for(int i = 0; i < n-1; i++){
    //             tT += Math.ceil((double)dist[i]/(double)mid);
    //             // System.out.print(tT + " ");
    //             if(tT > hour)
    //                 break;
    //         }
    //         tT += ((double)dist[n-1]/(double)mid);
    //         if(tT <= hour){
    //             tS = mid;
    //             tj = mid -1;
    //         }else{
    //             ti = mid + 1;
    //         }
    //     }
    //     return tS;
    // }
}
