class Solution {
    int count(int[] r){
        int l = 0;
        int h = r.length;
        while(l < h){
            int m = (l+h)/2;
            if(r[m] == 1) l = m+1;
            else h = m;
        }
        return l;
    }
    public int[] kWeakestRows(int[][] mat, int k) {
        PriorityQueue<int[]> q = new PriorityQueue<>((a,b) -> a[0] != b[0] ? b[0] - a[0] : b[1] - a[1]);
        int r[] = new int[k];
        for(int i = 0; i < mat.length; i++){
            q.offer(new int[] {count(mat[i]), i});
            if(q.size() > k) q.poll();
        }

        while(k > 0) r[--k] = q.poll()[1];

        return r;
    }
}
