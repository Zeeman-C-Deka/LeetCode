/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root == null) return root;
        if(root.left == null && root.right == null) return root;
        Queue<Node> l1 = new LinkedList<>();
        if(root.left != null) l1.add(root.left);
        if(root.right != null) l1.add(root.right);
        Queue<Node> l2 = new LinkedList<>();
        while(!l1.isEmpty()){
            Node a = l1.poll();
            if(a.left != null) l2.add(a.left);
            if(a.right != null) l2.add(a.right);
            if(l1.size() >= 1) a.next = l1.peek();
            if(l1.size() == 0){
                l1.addAll(l2);
                l2.clear();
            }
        }
        return root;
    }
}
