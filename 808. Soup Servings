class Solution {
    public HashMap<Pair<Integer, Integer>, Double> sum = new HashMap<>();
    // public double serve(int a, int b){
    //     double sum = 0;
    //     if(a <= 0 && b > 0){
    //         sum += 1;
    //     }else if(a <= 0 && b <= 0){
    //         sum += 0.5;
    //     }
    //     if(a > 0 && b > 0){
    //         sum += serve(a-100, b);
    //         if(!(a-75 > 0 && b-25 <=0)){
    //             sum += serve(a-75, b-25);
    //         }
    //         if(!(a-50 > 0 && b-50 <=0)){
    //             sum += serve(a-50, b-50);
    //         }
    //         if(!(a-25 > 0 && b-75 <=0)){
    //             sum += serve(a-25, b-75);
    //         }
    //         sum = (sum*0.25);
    //     }
    //     return sum;
    // }
    public double soupServings(int n) {
        if (n > 4451) {
            return 1.0;
        }

        // int a = n;
        // int b = n;
        // double sum = serve(a, b);
        // return sum;
        return dp(n,n);
    }

    public double dp(int a, int b){
        if(a <= 0 && b <= 0){
            return 0.5;
        }
        if(a <= 0){
            return 1.0;
        }
        if(b <= 0){
            return 0.0;
        }
        Pair<Integer, Integer> key = new Pair<>(a, b);
        if(sum.containsKey(key)){
            return sum.get(key);
        }
        sum.put(key, 0.25*(dp(a-100,b)+dp(a-75,b-25)+dp(a-50,b-50)+dp(a-25,b-75)));
        return sum.get(key);
    }
}
