class Solution {
    public double champagneTower(int p, int r, int g) {
        double dp[][] = new double[r+1][];
        for(int i = 0; i < r+1; i++){
            dp[i] = new double[i+1];
        }
        if(p == 0){
            return 0.0;
        }
        dp[0][0] = (double)p;
        for(int i = 1; i <= r; i++){
           dp[i][0] = Math.max(0, (dp[i-1][0]-1)/2);
           int j = 1;
           for(j = 1; j < dp[i].length-1; j++){
               dp[i][j] = Math.max(0, (dp[i-1][j-1]-1)/2) + Math.max(0, (dp[i-1][j]-1)/2);
           }
           dp[i][j] = Math.max(0, (dp[i-1][j-1]-1)/2);
        }

        return Math.min(1, dp[r][g]);
    }
}
