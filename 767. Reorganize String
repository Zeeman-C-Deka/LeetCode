class Solution {
    HashMap<Character, Integer> m = new HashMap<>();
    LinkedList<Character> c = new LinkedList<>();
    char maX(char x){
        int ma = 0;
        char a = x;
        for(int i = 0; i < c.size(); i++){
            if(c.get(i) == x) continue;
            if(ma < m.get(c.get(i))){
                ma = m.get(c.get(i));
                a = c.get(i);
            }
        }
        return a;
    }
    public String reorganizeString(String s) {
        String r = "";
        for(int i = 0; i < s.length(); i++){
            if(!m.containsKey(s.charAt(i))){
                m.put(s.charAt(i), 1);
                c.add(s.charAt(i));
            }else{
                m.put(s.charAt(i), m.get(s.charAt(i))+1);
            }
        }
        char c1 = maX('0');
        while(c.size() > 0){
            r += c1;
            m.put(c1, m.get(c1)-1);
            if(m.get(c1) == 0){
                c.removeFirstOccurrence(c1);
                m.remove(c1);
            }
            //System.out.println(r);
            c1 = maX(c1);
            if(c.size() > 0 && r.charAt(r.length()-1) == c1){
                return "";
            }
        }
        return r;
    }
}
