class Solution {
    int findDist(int[][] p, int a, int b){
        return Math.abs(p[a][0]-p[b][0])+Math.abs(p[a][1]-p[b][1]);
    }
    public int minCostConnectPoints(int[][] p) {
        int r = 0, n = p.length;
        Set<Integer> m  = new HashSet<>();
        m.add(0);
        int d[] = new int[n];
        for(int i = 1; i < n; i++) d[i] = findDist(p, 0, i);
        while(m.size() != n){
            int next = -1;
            for(int i = 0; i < n; i++){
                if(m.contains(i)) continue;
                if(next == -1 || d[next] > d[i]) next = i;
            }
            m.add(next);
            r += d[next];
            for(int i = 0; i < n; i++){
                if(!m.contains(i)){
                    d[i] = Math.min(d[i], findDist(p, i, next));
                }
            }
        }
        return r;
    }
}
